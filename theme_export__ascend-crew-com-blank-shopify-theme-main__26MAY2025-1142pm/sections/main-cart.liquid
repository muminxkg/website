<!-- Cart Page Layout -->
<div class="cart-page-container">
  


  {% if cart.item_count > 0 %}
    <!-- Cart Items Section -->
    <div class="cart-content">
      
      <!-- Cart Items -->
      <div class="cart-items-section">
        <form action="{{ routes.cart_url }}" method="post" novalidate class="cart-form" id="cart-form">
          
          {% for item in cart.items %}
            <div class="cart-item" data-cart-item data-variant-id="{{ item.variant.id }}">
              
              <!-- Product Image -->
              <div class="cart-item-image">
                {% if item.image %}
                  <img src="{{ item.image | img_url: '300x300' }}" 
                       alt="{{ item.product.title }}" 
                       loading="lazy">
                {% else %}
                  <div class="cart-no-image">
                    <span>No Image</span>
                  </div>
                {% endif %}
              </div>
              
              <!-- Product Details -->
              <div class="cart-item-details">
                <div class="cart-item-info">
                  <h3 class="cart-item-title">
                    <a href="{{ item.product.url }}">{{ item.product.title }}</a>
                  </h3>
                  
                  {% if item.variant.title != 'Default Title' %}
                    <div class="cart-item-variant">
                      {{ item.variant.title }}
                    </div>
                  {% endif %}
                  
                  {% if item.properties.size > 0 %}
                    <div class="cart-item-properties">
                      {% for property in item.properties %}
                        {% unless property.last == blank %}
                          <span class="cart-item-property">
                            {{ property.first }}: {{ property.last }}
                          </span>
                        {% endunless %}
                      {% endfor %}
                    </div>
                  {% endif %}
                </div>
                
                <!-- Price -->
                <div class="cart-item-price">
                  {% if item.original_price != item.final_price %}
                    <span class="cart-price-sale">{{ item.final_price | money_without_trailing_zeros }}</span>
                    <span class="cart-price-original">{{ item.original_price | money_without_trailing_zeros }}</span>
                  {% else %}
                    <span class="cart-price-regular">{{ item.price | money_without_trailing_zeros }}</span>
                  {% endif %}
                </div>
              </div>
              
              <!-- Cart Actions (Quantity + Remove) -->
              <div class="cart-item-actions">
                <!-- Quantity Controls -->
                <div class="cart-item-quantity">
                  <div class="quantity-controls">
                    <button type="button" class="quantity-btn quantity-minus" data-variant-id="{{ item.variant.id }}">
                      <span>−</span>
                    </button>
                    <input type="number" 
                           name="updates[{{ item.variant.id }}]" 
                           value="{{ item.quantity }}" 
                           min="0" 
                           class="quantity-input"
                           data-variant-id="{{ item.variant.id }}">
                    <button type="button" class="quantity-btn quantity-plus" data-variant-id="{{ item.variant.id }}">
                      <span>+</span>
                    </button>
                  </div>
                </div>
                
                <!-- Remove Button -->
                <div class="cart-item-remove">
                  <button type="button" class="remove-item-btn" data-variant-id="{{ item.variant.id }}">
                    <span>×</span>
                  </button>
                </div>
              </div>
              
            </div>
          {% endfor %}
          
        </form>
      </div>
      
      <!-- Cart Summary -->
      <div class="cart-summary-section">
        <div class="cart-summary">
          
          <!-- Discount Code -->
          <div class="cart-discount-section">
            <div class="discount-code-input">
              <input type="text" 
                     id="discount-code" 
                     placeholder="Discount code"
                     class="discount-input">
              <button type="button" class="discount-apply-btn" id="apply-discount">
                Apply
              </button>
            </div>
            
            <!-- Error message for invalid discount codes -->
            <div class="discount-error-message" id="discount-error" style="display: none;">
              <span>Invalid discount code. Please try again.</span>
            </div>
            
            <!-- Success message for valid discount codes -->
            <div class="discount-success-message" id="discount-success" style="display: none;">
              <span>Discount code applied successfully!</span>
            </div>
            
            {% if cart.cart_level_discount_applications.size > 0 %}
              <div class="applied-discounts">
                {% for discount_application in cart.cart_level_discount_applications %}
                  <div class="applied-discount">
                    <span class="discount-title">{{ discount_application.title }}</span>
                    <span class="discount-amount">-{{ discount_application.total_allocated_amount | money_without_trailing_zeros }}</span>
                  </div>
                {% endfor %}
              </div>
            {% endif %}
          </div>
          
          <!-- Cart Totals -->
          <div class="cart-totals">
            
            <div class="cart-subtotal">
              <span class="cart-total-label">Subtotal</span>
              <div class="cart-total-right">
                {% if cart.item_count > 0 %}
                  <span class="cart-total-count">{{ cart.item_count }} {% if cart.item_count == 1 %}item{% else %}items{% endif %}</span>
                {% endif %}
                <span class="cart-total-amount">{{ cart.total_price | money_without_trailing_zeros }}</span>
              </div>
            </div>
            
            {% if cart.total_discounts > 0 %}
              <div class="cart-discount-total">
                <span class="cart-total-label">Discount</span>
                <span class="cart-total-amount discount-amount">-{{ cart.total_discounts | money_without_trailing_zeros }}</span>
              </div>
            {% endif %}
            
            <div class="cart-shipping-note">
              <p>Shipping calculated at checkout</p>
            </div>
            
          </div>
          
          <!-- Checkout Button -->
          <div class="cart-checkout-section">
            <button type="submit" class="cart-checkout-btn" name="add" form="cart-form">
              <span>Proceed to Checkout</span>
            </button>
            
            <div class="cart-continue-shopping">
              <a href="{{ routes.root_url }}" class="continue-shopping-link">
                Continue Shopping
              </a>
            </div>
          </div>
          
        </div>
      </div>
      
    </div>
  
  {% else %}
    <!-- Empty Cart State -->
    <div class="cart-empty">
      <div class="cart-empty-content">
        <h2 class="cart-empty-title">Your cart is empty</h2>
        <p class="cart-empty-text">Looks like you haven't added anything to your cart yet.</p>
        <a href="{{ routes.root_url }}" class="cart-continue-btn">
          Start Shopping
        </a>
      </div>
    </div>
  {% endif %}
  
</div>

<style>
  /* Cart Page Container */
  .cart-page-container {
    width: 100%;
    margin: 0;
    padding: 1rem;
    font-family: var(--font-family);
  }
  
  
  .cart-item-count {
    font-size: 0.9rem;
    color: #666;
    font-weight: 400;
  }
  
  /* Cart Content Layout */
  .cart-content {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 3rem;
    align-items: start;
  }
  
  /* Cart Items Section */
  .cart-items-section {
    width: 100%;
  }
  
  .cart-item {
    display: grid;
    grid-template-columns: 200px 1fr auto;
    gap: 1rem;
    align-items: start;
    padding: 1.5rem 0;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .cart-item:last-child {
    border-bottom: none;
  }
  
  /* Product Image */
  .cart-item-image {
    width: 200px;
    height: 250px;
    background: #f5f5f5;
    border-radius: 4px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .cart-no-image {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #999;
    font-size: 0.8rem;
  }
  
  /* Product Details */
  .cart-item-details {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    align-self: start;
  }
  
  .cart-item-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .cart-item-title {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    line-height: 1.3;
  }
  
  .cart-item-title a {
    color: #000;
    text-decoration: none;
  }
  
  .cart-item-title a:hover {
    text-decoration: underline;
  }
  
  .cart-item-variant {
    font-size: 0.85rem;
    color: #666;
    font-weight: 400;
  }
  
  .cart-item-properties {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
  }
  
  .cart-item-property {
    font-size: 0.75rem;
    color: #666;
  }
  
  .cart-item-price {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 0.25rem;
  }
  
  .cart-price-regular,
  .cart-price-sale {
    font-size: 1rem;
    font-weight: 600;
    color: #000;
  }
  
  .cart-price-sale {
    color: #dc3545;
  }
  
  .cart-price-original {
    font-size: 0.85rem;
    color: #999;
    text-decoration: line-through;
  }
  
  /* Cart Actions (Quantity + Remove) */
  .cart-item-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: flex-end;
    justify-self: end;
  }
  
  /* Quantity Controls */
  .cart-item-quantity {
    display: flex;
    align-items: center;
  }
  
  .quantity-controls {
    display: flex;
    align-items: center;
    background: #f8f8f8;
    border-radius: 6px;
    overflow: hidden;
  }
  
  .quantity-btn {
    background: transparent;
    border: none;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 1rem;
    color: #333;
    transition: background-color 0.2s ease;
  }
  
  .quantity-btn:hover {
    background: #e0e0e0;
  }
  
  .quantity-input {
    border: none;
    width: 50px;
    height: 32px;
    text-align: center;
    font-size: 0.9rem;
    background: #f8f8f8;
    -moz-appearance: textfield;
    font-weight: 500;
  }
  
  .quantity-input::-webkit-outer-spin-button,
  .quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  /* Remove Button */
  .cart-item-remove {
    display: flex;
    align-items: center;
  }
  
  .remove-item-btn {
    background: none;
    border: none;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: #999;
    font-size: 1.5rem;
    border-radius: 50%;
    transition: all 0.2s ease;
  }
  
  .remove-item-btn:hover {
    background: #f5f5f5;
    color: #dc3545;
  }
  
  /* Cart Summary */
  .cart-summary-section {
    width: 100%;
  }
  
  .cart-summary {
    background: #f9f9f9;
    border-radius: 8px;
    padding: 1.5rem;
    position: sticky;
    top: 2rem;
  }
  
  /* Discount Code */
  .cart-discount-section {
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid #e8e8e8;
  }
  
  .discount-code-input {
    display: flex;
    gap: 0.5rem;
  }
  
  .discount-input {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 0.85rem;
    font-family: var(--font-family);
  }
  
  .discount-input:focus {
    outline: none;
    border-color: #333;
  }
  
  /* Error state for discount input */
  .discount-input.error {
    border-color: #dc3545 !important;
    background-color: #ffeaea;
  }
  
  /* Success state for discount input */
  .discount-input.success {
    border-color: #28a745 !important;
    background-color: #eafaf1;
  }
  
  .discount-error-message {
    margin-top: 0.5rem;
    padding: 0.5rem;
    background-color: #ffeaea;
    border: 1px solid #dc3545;
    border-radius: 4px;
    color: #dc3545;
    font-size: 0.8rem;
    font-weight: 500;
  }
  
  .discount-success-message {
    margin-top: 0.5rem;
    padding: 0.5rem;
    background-color: #eafaf1;
    border: 1px solid #28a745;
    border-radius: 4px;
    color: #28a745;
    font-size: 0.8rem;
    font-weight: 500;
  }
  
  .discount-apply-btn {
    background: #333;
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    font-size: 0.85rem;
    font-family: var(--font-family);
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .discount-apply-btn:hover {
    background: #555;
  }
  
  .applied-discounts {
    margin-top: 1rem;
  }
  
  .applied-discount {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: #e8f5e8;
    border-radius: 4px;
    font-size: 0.8rem;
  }
  
  .discount-title {
    color: #2d5a2d;
    font-weight: 500;
  }
  
  .discount-amount {
    color: #2d5a2d;
    font-weight: 600;
  }
  
  /* Cart Totals */
  .cart-totals {
    margin-bottom: 1.5rem;
  }
  
  .cart-subtotal,
  .cart-discount-total {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }
  
  .cart-total-right {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .cart-total-count {
    font-size: 0.8rem;
    color: #000;
    font-weight: 300;
  }
  
  .cart-total-label {
    font-size: 0.9rem;
    color: #333;
    font-weight: 500;
  }
  
  .cart-total-amount {
    font-size: 0.9rem;
    font-weight: 600;
    color: #000;
  }
  
  .cart-discount-total .cart-total-amount {
    color: #dc3545;
  }
  
  .cart-shipping-note {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e8e8e8;
  }
  
  .cart-shipping-note p {
    margin: 0;
    font-size: 0.8rem;
    color: #666;
    text-align: center;
  }
  
  /* Checkout Button */
  .cart-checkout-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .cart-checkout-btn {
    background: #000;
    color: white;
    border: none;
    padding: 1rem 1.5rem;
    font-size: 0.9rem;
    font-family: var(--font-family);
    font-weight: 600;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.3s ease;
    letter-spacing: 0.5px;
    text-transform: uppercase;
  }
  
  .cart-checkout-btn:hover {
    background: #333;
    transform: translateY(-1px);
  }
  
  .cart-continue-shopping {
    text-align: center;
  }
  
  .continue-shopping-link {
    color: #666;
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 400;
  }
  
  .continue-shopping-link:hover {
    color: #000;
    text-decoration: underline;
  }
  
  /* Empty Cart State */
  .cart-empty {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 60vh;
  }
  
  .cart-empty-content {
    text-align: center;
    max-width: 400px;
  }
  
  .cart-empty-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #000;
    margin: 0 0 1rem 0;
  }
  
  .cart-empty-text {
    font-size: 1rem;
    color: #666;
    margin: 0 0 2rem 0;
    line-height: 1.5;
  }
  
  .cart-continue-btn {
    background: #000;
    color: white;
    text-decoration: none;
    padding: 1rem 2rem;
    font-size: 0.9rem;
    font-family: var(--font-family);
    font-weight: 600;
    border-radius: 4px;
    transition: all 0.3s ease;
    letter-spacing: 0.5px;
    text-transform: uppercase;
    display: inline-block;
  }
  
  .cart-continue-btn:hover {
    background: #333;
    transform: translateY(-1px);
  }
  
  /* Mobile Responsive */
  @media screen and (max-width: 1024px) {
    .cart-content {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
    
    .cart-summary {
      position: static;
    }
  }
  
  @media screen and (max-width: 768px) {
    .cart-page-container {
      padding: 1rem 0.5rem;
    }
    
    .cart-header {
      margin-bottom: 1.5rem;
    }
    
    .cart-item {
      grid-template-columns: 150px 1fr;
      gap: 1rem;
      padding: 1.5rem 0;
    }
    
    .cart-item-actions {
      grid-column: 1 / -1;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      margin-top: 1rem;
    }
    
    .cart-item-image {
      width: 150px;
      height: 188px;
    }
  }
  
  @media screen and (max-width: 480px) {
    .cart-page-container {
      padding: 0.75rem 0.25rem;
    }
    
    .cart-item {
      grid-template-columns: 120px 1fr;
      gap: 0.75rem;
    }
    
    .cart-item-image {
      width: 120px;
      height: 150px;
    }
    
    .cart-summary {
      padding: 1rem;
    }
    
    .discount-code-input {
      flex-direction: column;
    }
    
    .discount-apply-btn {
      align-self: stretch;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Cart page loaded');
    
    // Quantity Controls
    const quantityBtns = document.querySelectorAll('.quantity-btn');
    const quantityInputs = document.querySelectorAll('.quantity-input');
    const removeItemBtns = document.querySelectorAll('.remove-item-btn');
    const cartForm = document.getElementById('cart-form');
    
    // Quantity increase/decrease
    quantityBtns.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        
        const variantId = this.getAttribute('data-variant-id');
        const input = document.querySelector(`input[data-variant-id="${variantId}"]`);
        const isPlus = this.classList.contains('quantity-plus');
        const isMinus = this.classList.contains('quantity-minus');
        
        let currentValue = parseInt(input.value) || 0;
        
        if (isPlus) {
          input.value = currentValue + 1;
        } else if (isMinus && currentValue > 0) {
          input.value = currentValue - 1;
        }
        
        // Trigger update
        updateCart();
      });
    });
    
    // Quantity input change
    quantityInputs.forEach(input => {
      input.addEventListener('change', function() {
        const value = parseInt(this.value) || 0;
        
        if (value < 0) {
          this.value = 0;
        }
        
        updateCart();
      });
    });
    
    // Remove item buttons
    removeItemBtns.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        
        const variantId = this.getAttribute('data-variant-id');
        const input = document.querySelector(`input[data-variant-id="${variantId}"]`);
        
        if (input) {
          input.value = 0;
          updateCart();
        }
      });
    });
    
    // Update cart function
    function updateCart() {
      if (!cartForm) return;
      
      const formData = new FormData(cartForm);
      
      fetch('/cart/update.js', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(cart => {
        // Reload page to show updated cart
        window.location.reload();
      })
      .catch(error => {
        console.error('Error updating cart:', error);
      });
    }
    
    // Discount code functionality
    const discountInput = document.getElementById('discount-code');
    const applyDiscountBtn = document.getElementById('apply-discount');
    const discountError = document.getElementById('discount-error');
    const discountSuccess = document.getElementById('discount-success');
    
    if (applyDiscountBtn && discountInput) {
      applyDiscountBtn.addEventListener('click', function() {
        const discountCode = discountInput.value.trim();
        
        if (!discountCode) {
          showDiscountError('Please enter a discount code');
          return;
        }
        
        // Clear any previous states
        clearDiscountMessages();
        
        // Show loading state
        applyDiscountBtn.textContent = 'Checking...';
        applyDiscountBtn.disabled = true;
        
        // Apply discount code to cart and validate
        fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          // Try to apply the discount code to the current cart
          return fetch('/cart/update.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              attributes: {
                'discount_code': discountCode
              }
            })
          });
        })
        .then(response => response.json())
        .then(updatedCart => {
          // Check if discount was applied by looking for discount applications
          // or by checking if the cart total changed as expected
          // Since we can't directly validate discount codes in the cart,
          // we'll use a different approach: redirect to checkout and let Shopify handle validation
          
          // For now, we'll simulate validation and show success
          // In a real implementation, you'd need to:
          // 1. Store the discount code in cart attributes
          // 2. Let the checkout page validate it
          // 3. Or use Shopify's Admin API (if available) to validate
          
          validateDiscountCode(discountCode);
        })
        .catch(error => {
          console.error('Error applying discount:', error);
          showDiscountError('Error applying discount code. Please try again.');
          resetApplyButton();
        });
      });
      
      // Validate discount code function
      function validateDiscountCode(code) {
        // This is a simplified validation - in reality, you'd need to:
        // 1. Check against your known discount codes
        // 2. Use Shopify's API to validate
        // 3. Or redirect to checkout and handle validation there
        
        // For demonstration, let's create some sample valid codes
        const validCodes = ['SAVE10', 'WELCOME20', 'FIRST15', 'DISCOUNT5'];
        const normalizedCode = code.toUpperCase();
        
        if (validCodes.includes(normalizedCode)) {
          // Valid discount code
          showDiscountSuccess('Discount code applied successfully!');
          
          // Store the discount code for checkout
          localStorage.setItem('applied_discount', code);
          
          // Update checkout button to include discount
          updateCheckoutButton(code);
        } else {
          // Invalid discount code
          showDiscountError('Invalid discount code. Please try again.');
        }
        
        resetApplyButton();
      }
      
      // Allow Enter key to apply discount
      discountInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          applyDiscountBtn.click();
        }
      });
      
      // Clear messages when user starts typing
      discountInput.addEventListener('input', function() {
        clearDiscountMessages();
      });
    }
    
    // Show discount error function
    function showDiscountError(message) {
      if (discountError && discountInput) {
        discountError.querySelector('span').textContent = message;
        discountError.style.display = 'block';
        discountInput.classList.add('error');
        discountInput.classList.remove('success');
        if (discountSuccess) discountSuccess.style.display = 'none';
      }
    }
    
    // Show discount success function
    function showDiscountSuccess(message) {
      if (discountSuccess && discountInput) {
        discountSuccess.querySelector('span').textContent = message;
        discountSuccess.style.display = 'block';
        discountInput.classList.add('success');
        discountInput.classList.remove('error');
        if (discountError) discountError.style.display = 'none';
      }
    }
    
    // Clear discount messages function
    function clearDiscountMessages() {
      if (discountError && discountSuccess && discountInput) {
        discountError.style.display = 'none';
        discountSuccess.style.display = 'none';
        discountInput.classList.remove('error', 'success');
      }
    }
    
    // Reset apply button
    function resetApplyButton() {
      if (applyDiscountBtn) {
        applyDiscountBtn.textContent = 'Apply';
        applyDiscountBtn.disabled = false;
      }
    }
    
    // Update checkout button with discount
    function updateCheckoutButton(discountCode) {
      const checkoutBtn = document.querySelector('.cart-checkout-btn');
      if (checkoutBtn) {
        checkoutBtn.setAttribute('data-discount-code', discountCode);
      }
    }
    
    // Update checkout button to redirect to checkout
    const checkoutBtn = document.querySelector('.cart-checkout-btn');
    if (checkoutBtn) {
      checkoutBtn.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Check if there's a stored discount code
        const discountCode = this.getAttribute('data-discount-code') || localStorage.getItem('applied_discount');
        
        if (discountCode) {
          // Go to checkout with discount code
          window.location.href = `/checkout?discount=${encodeURIComponent(discountCode)}`;
        } else {
          // Go to checkout without discount
          window.location.href = '/checkout';
        }
      });
    }
  });
</script>